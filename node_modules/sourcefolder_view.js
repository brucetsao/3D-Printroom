var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var filestat = require('filestat');
var _ = require('underscore');


var allowedExtensions = ['stl'];
global.fileCache = global.fileCache || {};

var gen_files_view = jade.compile([
    '- each file in files',
    '  - var fileType = file.type == "folder"?"icon-folder-close":"icon-file"',
    '  tr.filepath(data-path="#{file.path}")',
    '    td.filetype(data-type="#{file.type}")',
    '      i(class="#{fileType}")',
    '    td.filename #{file.name}',
    '    td.filesize(title="#{file.size}") #{file.sizeAsHuman}'
].join('\n'));

function SourceFolder(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;

  var self = this;
  var derivativefilelist = $('#derivativefilelist');

  this.element.parent().on('click', function() {
    self.element.find('.focus').removeClass('focus');
  });

  this.element.delegate('.filepath', 'click', function(e) {

    self.element.find('.focus').removeClass('focus');
    $(this).addClass('focus');

    var filepath = $(this).attr('data-path');
    var filename = $(this).text();
    var filenameMatch = filename.match(/(.*)\.stl/);
    if (filenameMatch){
      self.emit('clickFile', filenameMatch[1], filepath);
    } else {
      //todo replace with event
      $('tbody', derivativefilelist).html('');
    }

    e.stopPropagation();
  });

  this.element.delegate('.filepath', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    self.emit('dblclickFile', file_path);
  });

}

util.inherits(SourceFolder, events.EventEmitter);

SourceFolder.prototype.open = function(dir) {
  var self = this;
  fs.readdir(dir, function(error, files) {
    if (error) {
      console.error(error);
      return;
    }

    var filesToShow = []
    for (var i = 0; i < files.length; ++i) {
      
      var file = filestat.stat(path.join(dir, files[i]));
      global.fileCache[files[i]] = file;

      if (file.type == 'folder' || _.contains(allowedExtensions, file.ext)){
        filesToShow.push(file);
      }
    }

    $('tbody', self.element).html(gen_files_view({ files: filesToShow }));
  });
}

exports.SourceFolder = SourceFolder; 
