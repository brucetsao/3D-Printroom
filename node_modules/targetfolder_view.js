var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var filestat = require('filestat');
var _ = require('underscore');
var moment = require('moment');

var gen_files_view = jade.compile([
    '- each file in files',
    '  - var fileType = file.type == "folder"?"icon-folder-close":"icon-file"',
    '  tr.filepath(data-path="#{file.path}")',
    '   td.filetype(data-type="#{file.type}")',
    '      i(class="#{fileType}")',
    '   td #{file.shortName}',
    '   td #{file.sizeAsHuman}',
    '   td #{file.gcodeData&&file.gcodeData.createdAsHuman||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.modifiedAsHuman||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.bottom_solid_layers||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.extrusion_multiplier||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.filament_diameter||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.fill_density||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.first_layer_extrusion_width||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.infill_extrusion_width||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.infill_speed||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.layer_height||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.nozzle_diameter||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.perimeter_speed||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.perimeters||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.perimeters_extrusion_width||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.scale||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.top_solid_layers||\'\'}',
    '   td #{file.gcodeData&&file.gcodeData.travel_speed||\'\'}'
].join('\n'));


function TargetFolder(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;

  var self = this;

  this.element.parent().on('click', function() {
    self.element.find('.focus').removeClass('focus');
  });

  this.element.delegate('.filepath', 'click', function(e) {

    self.element.find('.focus').removeClass('focus');
    $(this).addClass('focus');

    e.stopPropagation();
  });

  this.element.delegate('.filepath', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    var filename = $(this).text();
    self.emit('dblclickFile', filename,file_path);
  });


}

util.inherits(TargetFolder, events.EventEmitter);


TargetFolder.prototype.showDerivatives = function(filenameRoot, filepath) {
  var self = this;
  filesToShow = [];

  var filenameRootRegExp = new RegExp(filenameRoot+".*\\.(\\bgcode\\b|\\bsvg\\b)$");

  _.each(global.fileCache, function(file, key, list){
    if (filenameRootRegExp.test(key)){

      file.shortName = file.name.replace(filenameRoot, "*");


      if (file.type == 'file' && file.ext == 'gcode' && !file.gcodeData){
        file.gcodeData = getGcodeData(file.path);

        file.gcodeData.accessedAsHuman = file.gcodeData.accessed ? moment(file.gcodeData.accessed).fromNow():'';
        file.gcodeData.createdAsHuman = file.gcodeData.created ? moment(file.gcodeData.created).fromNow():'';
        file.gcodeData.modifiedAsHuman = file.gcodeData.modified ? moment(file.gcodeData.modified).fromNow():'';

        global.fileCache[key] = file;
      }
      
      filesToShow.push(file);
    }        
  });

  $('tbody',self.element).html(gen_files_view({ files: filesToShow }));
};


function getGcodeData(path){
  var buffer = new Buffer(1000);

  var gcodeData = {
    "path": path
  };

  var fd = fs.openSync(path, 'r');

  var fileStat = fs.fstatSync(fd);

  gcodeData.accessed = fileStat.atime.toJSON();
  gcodeData.modified = fileStat.mtime.toJSON();
  gcodeData.created = fileStat.ctime.toJSON();
  gcodeData.byteSize = fileStat.size;

  fs.readSync(fd, buffer, 0, 1000);

  var bufferLines = _.map(buffer.toString().split(/\r\n|\r|\n/), function(x){
    var m = x.match(/^;(.*)=(.*)/);
    if (!m) return undefined;

    return [m[1].trim().toLowerCase().replace(/ /g,'_'), m[2].trim()];
  });

  _.extend(gcodeData, _.object(_.compact(bufferLines)))

  return gcodeData;
}


exports.TargetFolder = TargetFolder; 
